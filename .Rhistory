PAV <- automate_load_data(PAV, read.csv, stringsAsFactors = T)
INST <- automate_load_data(INST, read.csv, stringsAsFactors = T)
PIT <- automate_load_data(PIT, read.csv, stringsAsFactors = T)
HED <- automate_load_data(HED, read.csv, stringsAsFactors = T)
check_git()
check_make()
check_docker()
options(scipen = 666, warn=-1, contrasts=c("contr.sum","contr.poly"), mc.cores = parallel::detectCores()) #remove scientific notation # remove warnings #set contrasts to sum !
set.seed(666) #set random seed
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')) #set "better" lmer optimizer #nolimit # yoloptimizer
emm_options(pbkrtest.limit = 5000) #increase repetitions limit
cl <- parallel::detectCores() #to mulithread
source('R/plots.R', echo=F)# plot specification
source('R/utils.R', echo=F)# useful functions
#subset only pretest
tables <- c("PAV","INST","PIT","HED", "intern")
dflist <- lapply(mget(tables),function(x)subset(x, group == 'obese'))
list2env(dflist, envir=.GlobalEnv)
intern = subset(intern, session == 'third') #only last session
#exclude participants (242 really outlier everywhere, 256 can't do the task, 114 & 228 REALLY hated the solution and thus didn't "do" the conditioning) & 123 and 124 have imcomplete data
# dflist <- lapply(mget(tables),function(x)filter(x, id %notin% c(242, 256, 114, 228, 123, 124)))
# list2env(dflist, envir=.GlobalEnv)
# prepro RT PAV -----------------------------------------------------------
# get times in milliseconds
PAV$RT    <- PAV$RT * 1000
#Preprocessing
PAV$condition <- droplevels(PAV$condition, exclude = "Baseline")
acc_bef = mean(PAV$ACC, na.rm = TRUE) #0.93
full = length(PAV$RT)
##shorter than 100ms and longer than 3sd+mean
PAV.clean <- filter(PAV, RT >= 100) # min RT is
PAV.clean <- ddply(PAV.clean, .(id), transform, RTm = mean(RT))
PAV.clean <- ddply(PAV.clean, .(id), transform, RTsd = sd(RT))
PAV.clean <- filter(PAV.clean, RT <= RTm+3*RTsd)
# calculate the dropped data in the preprocessing
clean = length(PAV.clean$RT)
dropped = full-clean
(dropped*100)/full
# gather PAV --------------------------------------------------------------------
PAV.means <- aggregate(list(RT=PAV.clean$RT, liking=PAV.clean$liking), by = list(PAV.clean$id, PAV.clean$condition, PAV.clean$session), FUN='mean') # extract means
PAV.means = PAV.means %>% gather(variable, value, (RT:liking)) %>%  unite(var, variable,Group.3) %>% spread(var, value)
colnames(PAV.means) <- c('id','condition', 'baseline_lik', 'liking', 'baseline_RT', 'RT')
PAV.means = filter(PAV.means, id %notin% c(230)) # remove 230 because it doesnt have CS minus condition
PAV.means = na.omit(PAV.means); # remove dropout participants
# create baseline diff
Empty = subset(PAV.means, condition == "CSminus"); Milkshake = subset(PAV.means, condition == "CSplus"); diff = Empty;
diff$diff_base_lik = Milkshake$baseline_lik - Empty$baseline_lik; diff$diff_base_RT = Empty$baseline_RT - Milkshake$baseline_RT; # reverse for RT because we are looking at latency
PAV.means = merge(x = PAV.means, y = diff[ , c("diff_base_lik", "diff_base_RT", 'id')], by = "id", all.x=TRUE)
PAV.means = PAV.means %>% group_by %>% mutate_at(c('diff_base_lik', "diff_base_RT"), scale)
# gather INST -------------------------------------------------------------
INST.means <- aggregate(INST$grips, by = list(INST$id, INST$trial, INST$session), FUN='mean') # extract means
INST.means = spread(INST.means, Group.3, x)
colnames(INST.means) <- c('id','trial','baseline', 'grips')
tmp = lspline(INST.means$trial, 5); INST.means$ls1 = tmp[,1] ; INST.means$ls2 = tmp[,2]
INST.means = na.omit(INST.means); # remove dropout participants
# create baseline diff
# Empty = subset(INST.means, condition == "Empty"); Milkshake = subset(INST.means, condition == "MilkShake"); diff = Empty;
# diff$diff_base = Milkshake$baseline - Empty$baseline
# INST.means = merge(x = INST.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
# gather PIT --------------------------------------------------------------------
PIT.means <- aggregate(PIT$AUC, by = list(PIT$id, PIT$condition, PIT$session), FUN='mean') # extract means
PIT.means = spread(PIT.means, Group.3, x)
colnames(PIT.means) <- c('id', 'condition','baseline', 'AUC')
#remove the baseline (we just use it for fMRI analysis)
PIT.means =  subset(PIT.means, condition != 'BL')
PIT.means = na.omit(PIT.means); # remove dropout participants
# create baseline diff
Empty = subset(PIT.means, condition == "CSminus"); Milkshake = subset(PIT.means, condition == "CSplus"); diff = Empty;
diff$diff_base = Milkshake$baseline - Empty$baseline
PIT.means = merge(x = PIT.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
PIT.means = PIT.means %>% group_by %>% mutate_at('diff_base', scale)
# gather HED --------------------------------------------------------------
HED.means <- aggregate(list(liking=HED$perceived_liking, intensity=HED$perceived_intensity, familiarity=HED$perceived_familiarity), by = list(HED$id, HED$condition, HED$session), FUN='mean') # extract means
HED.means = HED.means %>% gather(variable, value, (liking:familiarity)) %>%  unite(var, variable,Group.3) %>% spread(var, value)
colnames(HED.means) <- c('id','condition', 'baseline_fam', 'familiarity', 'baseline_int', 'intensity', 'baseline_lik', 'liking')
HED.means = na.omit(HED.means); # remove dropout participants
# create Intensity and Familiarity diff
Empty = subset(HED.means, condition == "Empty"); Milkshake = subset(HED.means, condition == "MilkShake"); diff = Empty;
diff$int = Milkshake$intensity - Empty$intensity; diff$fam = Milkshake$familiarity - Empty$familiarity;
HED.means = merge(x = HED.means, y = diff[ , c("int", "fam", 'id')], by = "id", all.x=TRUE)
# create baseline diff
diff$diff_base = Milkshake$baseline_lik - Empty$baseline_lik
HED.means = merge(x = HED.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
HED.means = HED.means %>% group_by %>% mutate_at(c("int", "fam", "diff_base"), scale)
#merge with info
tables = c('PAV.means', 'INST.means', 'PIT.means', 'HED.means')
dflist <- lapply(mget(tables),function(x)merge(x, info, by = "id"))
list2env(dflist, envir=.GlobalEnv)
# creates diff BMI for each data
dflist <- lapply(mget(tables),function(x) diffX(x))
list2env(dflist, envir=.GlobalEnv)
# creates internal states variables for each data
listA = 2:5
dflist = mapply(internal,tables,listA)
list2env(dflist, envir=.GlobalEnv)
PAV.means$BMI1 = PAV.means$BMI_t1 # keep it unstandadized for later
#center covariates
dflist <- lapply(mget(tables),function(x) x %>% group_by %>% mutate_at(c("thirsty", "hungry", "age", "diff_BMIz", "BMI_t1"), scale))
list2env(dflist, envir=.GlobalEnv)
#imput mean (0 since its mean centered) for the two participant that have missing covariate (MAR) data so we can still use them in ANCOVA (this happens only for thirsty and hungry) in PAV 232
tables <- c("PAV","INST","PIT","HED")
dflist <- lapply(mget(tables),function(x) imput(x))
list2env(dflist, envir=.GlobalEnv)
#267
# clean PAV --------------------------------------------------------------
# define as.factors
fac <- c("id", "condition", "gender", "intervention")
PAV.means[fac] <- lapply(PAV.means[fac], factor)
#revalue all catego
PAV.means$condition = as.factor(revalue(PAV.means$condition, c(CSminus="-1", CSplus="1"))); PAV.means$condition <- factor(PAV.means$condition, levels = c("1", "-1"))#change value of condition
# clean PIT --------------------------------------------------------------
# define as factors
PIT.means[fac] <- lapply(PIT.means[fac], factor)
#revalue all catego
PIT.means$condition = as.factor(revalue(PIT.means$condition, c(CSminus="-1", CSplus="1"))); PIT.means$condition <- factor(PIT.means$condition, levels = c("1", "-1"))#change value of condition
# clean HED ---------------------------------------------------------------
# define as.factors
HED.means[fac] <- lapply(HED.means[fac], factor)
#revalue all catego
HED.means$condition = as.factor(revalue(HED.means$condition, c(MilkShake="1", Empty="-1"))) #change value of condition
HED.means$condition <- relevel(HED.means$condition, "1") # Make MilkShake first
# clean INST -------------------------------------------------------------
#defne factors
fac <- c("id", "gender", "intervention")
INST.means[fac] <- lapply(INST.means[fac], factor)
#revalue all catego
df = PAV.means; df$intervention = as.factor(revalue(as.factor(df$intervention), c("0"="Placebo", "1"="Liraglutide")));#using pav.means but oculd be any other
AGE = ddply(df,~intervention,summarise,mean=mean(age),sd=sd(age), min = min(age), max = max(age));
AGE %>%
kbl(caption ="AGE", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
BMI = ddply(df,~intervention,summarise,mean=mean(BMI1),sd=sd(BMI1), min = min(BMI1), max = max(BMI1));
BMI %>%
kbl(caption ="BMI", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
GENDER = ddply(df, .(id, intervention), summarise, gender=mean(as.numeric(gender)))  %>%
group_by(gender, intervention) %>%
tally(); GENDER$gender = as.factor(revalue(as.factor(GENDER$gender), c("1"="Men", "2"="Women")));
GENDER %>% kbl(caption ="GENDER") %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
N_group = ddply(df, .(id, intervention), summarise, group=mean(as.numeric(intervention)))  %>%
group_by(intervention) %>% tally();
N_group %>%
kbl(caption ="Group") %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
aov_car(RT ~ condition*intervention + age + gender + thirsty + hungry + BMI_t1 +  diff_base_RT + Error(id/condition), PAV.means, factorize = F, anova_table = list(correction = "GG", es = "none"))
knitr::opts_chunk$set(echo = FALSE, warnings=FALSE)
library(repro)
# load packages from yaml header
automate_load_packages()
# include external scripts
automate_load_scripts()
# load data
info <- automate_load_data(info, read.csv, stringsAsFactors = T)
intern <- automate_load_data(intern, read.csv, stringsAsFactors = T)
PAV <- automate_load_data(PAV, read.csv, stringsAsFactors = T)
INST <- automate_load_data(INST, read.csv, stringsAsFactors = T)
PIT <- automate_load_data(PIT, read.csv, stringsAsFactors = T)
HED <- automate_load_data(HED, read.csv, stringsAsFactors = T)
check_git()
check_make()
check_docker()
options(scipen = 666, warn=-1, contrasts=c("contr.sum","contr.poly"), mc.cores = parallel::detectCores()) #remove scientific notation # remove warnings #set contrasts to sum !
set.seed(666) #set random seed
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')) #set "better" lmer optimizer #nolimit # yoloptimizer
emm_options(pbkrtest.limit = 5000) #increase repetitions limit
cl <- parallel::detectCores() #to mulithread
source('R/plots.R', echo=F)# plot specification
source('R/utils.R', echo=F)# useful functions
#subset only pretest
tables <- c("PAV","INST","PIT","HED", "intern")
dflist <- lapply(mget(tables),function(x)subset(x, group == 'obese'))
list2env(dflist, envir=.GlobalEnv)
intern = subset(intern, session == 'third') #only last session
#exclude participants (242 really outlier everywhere, 256 can't do the task, 114 & 228 REALLY hated the solution and thus didn't "do" the conditioning) & 123 and 124 have imcomplete data
# dflist <- lapply(mget(tables),function(x)filter(x, id %notin% c(242, 256, 114, 228, 123, 124)))
# list2env(dflist, envir=.GlobalEnv)
# prepro RT PAV -----------------------------------------------------------
# get times in milliseconds
PAV$RT    <- PAV$RT * 1000
#Preprocessing
PAV$condition <- droplevels(PAV$condition, exclude = "Baseline")
acc_bef = mean(PAV$ACC, na.rm = TRUE) #0.93
full = length(PAV$RT)
##shorter than 100ms and longer than 3sd+mean
PAV.clean <- filter(PAV, RT >= 100) # min RT is
PAV.clean <- ddply(PAV.clean, .(id), transform, RTm = mean(RT))
PAV.clean <- ddply(PAV.clean, .(id), transform, RTsd = sd(RT))
PAV.clean <- filter(PAV.clean, RT <= RTm+3*RTsd)
# calculate the dropped data in the preprocessing
clean = length(PAV.clean$RT)
dropped = full-clean
(dropped*100)/full
# gather PAV --------------------------------------------------------------------
PAV.means <- aggregate(list(RT=PAV.clean$RT, liking=PAV.clean$liking), by = list(PAV.clean$id, PAV.clean$condition, PAV.clean$session), FUN='mean') # extract means
PAV.means = PAV.means %>% gather(variable, value, (RT:liking)) %>%  unite(var, variable,Group.3) %>% spread(var, value)
colnames(PAV.means) <- c('id','condition', 'baseline_lik', 'liking', 'baseline_RT', 'RT')
PAV.means = filter(PAV.means, id %notin% c(230)) # remove 230 because it doesnt have CS minus condition
PAV.means = na.omit(PAV.means); # remove dropout participants
# create baseline diff
Empty = subset(PAV.means, condition == "CSminus"); Milkshake = subset(PAV.means, condition == "CSplus"); diff = Empty;
diff$diff_base_lik = Milkshake$baseline_lik - Empty$baseline_lik; diff$diff_base_RT = Empty$baseline_RT - Milkshake$baseline_RT; # reverse for RT because we are looking at latency
PAV.means = merge(x = PAV.means, y = diff[ , c("diff_base_lik", "diff_base_RT", 'id')], by = "id", all.x=TRUE)
PAV.means = PAV.means %>% group_by %>% mutate_at(c('diff_base_lik', "diff_base_RT"), scale)
# gather INST -------------------------------------------------------------
INST.means <- aggregate(INST$grips, by = list(INST$id, INST$trial, INST$session), FUN='mean') # extract means
INST.means = spread(INST.means, Group.3, x)
colnames(INST.means) <- c('id','trial','baseline', 'grips')
tmp = lspline(INST.means$trial, 5); INST.means$ls1 = tmp[,1] ; INST.means$ls2 = tmp[,2]
INST.means = na.omit(INST.means); # remove dropout participants
# create baseline diff
# Empty = subset(INST.means, condition == "Empty"); Milkshake = subset(INST.means, condition == "MilkShake"); diff = Empty;
# diff$diff_base = Milkshake$baseline - Empty$baseline
# INST.means = merge(x = INST.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
# gather PIT --------------------------------------------------------------------
PIT.means <- aggregate(PIT$AUC, by = list(PIT$id, PIT$condition, PIT$session), FUN='mean') # extract means
PIT.means = spread(PIT.means, Group.3, x)
colnames(PIT.means) <- c('id', 'condition','baseline', 'AUC')
#remove the baseline (we just use it for fMRI analysis)
PIT.means =  subset(PIT.means, condition != 'BL')
PIT.means = na.omit(PIT.means); # remove dropout participants
# create baseline diff
Empty = subset(PIT.means, condition == "CSminus"); Milkshake = subset(PIT.means, condition == "CSplus"); diff = Empty;
diff$diff_base = Milkshake$baseline - Empty$baseline
PIT.means = merge(x = PIT.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
PIT.means = PIT.means %>% group_by %>% mutate_at('diff_base', scale)
# gather HED --------------------------------------------------------------
HED.means <- aggregate(list(liking=HED$perceived_liking, intensity=HED$perceived_intensity, familiarity=HED$perceived_familiarity), by = list(HED$id, HED$condition, HED$session), FUN='mean') # extract means
HED.means = HED.means %>% gather(variable, value, (liking:familiarity)) %>%  unite(var, variable,Group.3) %>% spread(var, value)
colnames(HED.means) <- c('id','condition', 'baseline_fam', 'familiarity', 'baseline_int', 'intensity', 'baseline_lik', 'liking')
HED.means = na.omit(HED.means); # remove dropout participants
# create Intensity and Familiarity diff
Empty = subset(HED.means, condition == "Empty"); Milkshake = subset(HED.means, condition == "MilkShake"); diff = Empty;
diff$int = Milkshake$intensity - Empty$intensity; diff$fam = Milkshake$familiarity - Empty$familiarity;
HED.means = merge(x = HED.means, y = diff[ , c("int", "fam", 'id')], by = "id", all.x=TRUE)
# create baseline diff
diff$diff_base = Milkshake$baseline_lik - Empty$baseline_lik
HED.means = merge(x = HED.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
HED.means = HED.means %>% group_by %>% mutate_at(c("int", "fam", "diff_base"), scale)
#merge with info
tables = c('PAV.means', 'INST.means', 'PIT.means', 'HED.means')
dflist <- lapply(mget(tables),function(x)merge(x, info, by = "id"))
list2env(dflist, envir=.GlobalEnv)
# creates diff BMI for each data
dflist <- lapply(mget(tables),function(x) diffX(x))
list2env(dflist, envir=.GlobalEnv)
# creates internal states variables for each data
listA = 2:5
dflist = mapply(internal,tables,listA)
list2env(dflist, envir=.GlobalEnv)
PAV.means$BMI1 = PAV.means$BMI_t1 # keep it unstandadized for later
#center covariates
dflist <- lapply(mget(tables),function(x) x %>% group_by %>% mutate_at(c("thirsty", "hungry", "age", "diff_BMIz", "BMI_t1"), scale))
list2env(dflist, envir=.GlobalEnv)
#imput mean (0 since its mean centered) for the two participant that have missing covariate (MAR) data so we can still use them in ANCOVA (this happens only for thirsty and hungry) in PAV 232
tables <- c("PAV.means")
dflist <- lapply(mget(tables),function(x) imput(x))
list2env(dflist, envir=.GlobalEnv)
# clean PAV --------------------------------------------------------------
# define as.factors
fac <- c("id", "condition", "gender", "intervention")
PAV.means[fac] <- lapply(PAV.means[fac], factor)
#revalue all catego
PAV.means$condition = as.factor(revalue(PAV.means$condition, c(CSminus="-1", CSplus="1"))); PAV.means$condition <- factor(PAV.means$condition, levels = c("1", "-1"))#change value of condition
# clean PIT --------------------------------------------------------------
# define as factors
PIT.means[fac] <- lapply(PIT.means[fac], factor)
#revalue all catego
PIT.means$condition = as.factor(revalue(PIT.means$condition, c(CSminus="-1", CSplus="1"))); PIT.means$condition <- factor(PIT.means$condition, levels = c("1", "-1"))#change value of condition
# clean HED ---------------------------------------------------------------
# define as.factors
HED.means[fac] <- lapply(HED.means[fac], factor)
#revalue all catego
HED.means$condition = as.factor(revalue(HED.means$condition, c(MilkShake="1", Empty="-1"))) #change value of condition
HED.means$condition <- relevel(HED.means$condition, "1") # Make MilkShake first
# clean INST -------------------------------------------------------------
#defne factors
fac <- c("id", "gender", "intervention")
INST.means[fac] <- lapply(INST.means[fac], factor)
#revalue all catego
df = PAV.means; df$intervention = as.factor(revalue(as.factor(df$intervention), c("0"="Placebo", "1"="Liraglutide")));#using pav.means but oculd be any other
AGE = ddply(df,~intervention,summarise,mean=mean(age),sd=sd(age), min = min(age), max = max(age));
AGE %>%
kbl(caption ="AGE", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
BMI = ddply(df,~intervention,summarise,mean=mean(BMI1),sd=sd(BMI1), min = min(BMI1), max = max(BMI1));
BMI %>%
kbl(caption ="BMI", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
GENDER = ddply(df, .(id, intervention), summarise, gender=mean(as.numeric(gender)))  %>%
group_by(gender, intervention) %>%
tally(); GENDER$gender = as.factor(revalue(as.factor(GENDER$gender), c("1"="Men", "2"="Women")));
GENDER %>% kbl(caption ="GENDER") %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
N_group = ddply(df, .(id, intervention), summarise, group=mean(as.numeric(intervention)))  %>%
group_by(intervention) %>% tally();
N_group %>%
kbl(caption ="Group") %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
aov_car(RT ~ condition*intervention + age + gender + thirsty + hungry + BMI_t1 +  diff_base_RT + Error(id/condition), PAV.means, factorize = F, anova_table = list(correction = "GG", es = "none"))
# -------------------------------------- RT
model = aov_car(RT ~ condition*intervention + age + gender + thirsty + hungry + BMI_t1 +  diff_base_RT + Error(id/condition), PAV.means, factorize = F, anova_table = list(correction = "GG", es = "none"))
table = nice(model);
#calculate Partial eta-squared and its 90 % CI for each effect
pes_CI = pes_ci(RT ~ condition*intervention + age + gender + thirsty + hungry + BMI_t1 +  diff_base_RT + Error(id/condition), PAV.means);
table$`PES` = pes_CI[,1]
table$`Lower CI` = pes_CI[,2]
table$`Upper CI` = pes_CI[,3]
#calculate exclusion BF01 for each effect
test = extractBF(generalTestBF(RT ~ condition*intervention + condition*age + condition*gender + condition*thirsty + condition*hungry + condition*BMI_t1 + condition*diff_base_RT + id, data= PAV.means, whichRandom = 'id', neverExclude =  'id', whichModels ="top")); BF = 1/test[1] #switch to BF10 inclusion)); BF = 1/test[1] #switch to BF10 inclusion
table$BF10 = BF$bf[order(c(15,14,13,13,11,10,9,7,6,5,4,3,2,1,8))] # reorder
mod <- lmer(RT ~ condition*intervention + condition*age + condition*gender + condition*thirsty + condition*hungry + condition*BMI_t1 + condition*diff_base_RT + (1|id), data = PAV.means, control = control, REML = T) # recompute model with REML = T now for further report
ref_grid(mod)  #triple check everything is centered at 0
tab_model(mod, show.p = F,show.intercept = F, show.se = T, title ="", show.re.var = F, digits = 3, dv.labels = "Latency", emph.p = TRUE, file = "tmp/temp1.html")#pred.labels=c("CS+", "Lean", "Interaction (Lean:CS+)")
table
tables <- list.clean(readHTMLTable("tmp/temp1.html"), fun = is.null, recursive = FALSE)
tables2 = tables[[1]] %>% janitor::row_to_names(row_number = 1)
tables2 <- as.matrix(tables2) %>% as_tibble()
tables2[is.na(tables2)] <- ""
tables2[1:15,1:4] %>% kbl(caption ="Latency (ms)" ) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T,align='c')
tmp =tables2[16:19,1:2]
names(tmp) <- NULL
tmp %>% kbl() %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
table %>% kbl(digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%  row_spec(0,bold=T,align='c')
# RT
dfR <- summarySEwithin(df,
measurevar = "RT",
withinvars = "condition",
idvar = "id")
dfR$cond <- ifelse(dfR$condition == "1", -0.25, 0.25)
PAV.means$cond <- ifelse(PAV.means$condition == "1", -0.25, 0.25)
PAV.means <- PAV.means %>% mutate(condjit = jitter(as.numeric(cond), 0.3),
grouping = interaction(id, cond))
pp <- ggplot(PAV.means, aes(x = cond, y = RT,
fill = condition, color = condition)) +
geom_line(aes(x = condjit, group = id, y = RT), alpha = .3, size = 0.5, color = 'gray') +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(fill = condition, color = NA))+
geom_point(aes(x = condjit, shape = intervention), alpha = .3,) +
geom_crossbar(data = dfR, aes(y = RT, ymin=RT-se, ymax=RT+se), width = 0.2 , alpha = 0.1)+
ylab('Latency (ms)')+
xlab('Conditioned stimulus')+
scale_y_continuous(expand = c(0, 0), breaks = c(seq.int(200,800, by = 200)), limits = c(180,875)) +
scale_x_continuous(labels=c("CS+", "CS-"),breaks = c(-.25,.25), limits = c(-.5,.5)) +
scale_fill_manual(values=c("1"= pal[2], "-1"=  pal[1]), guide = 'none') +
scale_color_manual(values=c("1"= pal[2], "-1"=  pal[1]), guide = 'none') +
scale_shape_manual(name="Intervention", labels=c("Placebo", "Liraglutide"), values = c(1, 2)) +
theme_bw()
plt = pp + averaged_theme
pp + html_theme
model = aov_car(liking ~ condition*intervention + age + gender + thirsty + hungry + BMI_t1 +  diff_base_lik + Error(id/condition), data= df, factorize = F, anova_table = list(correction = "GG", es = "none"))
table = nice(model);
model
#calculate exclusion BF01 for each effect
test = extractBF(generalTestBF(liking ~ condition*intervention + condition*age + condition*gender + condition*thirsty + condition*hungry + condition*BMI_t1 + condition*diff_base_lik + id, data= PAV.means, whichRandom = 'id', neverExclude =  'id', whichModels ="top")); BF = 1/test[1] #switch to BF10 inclusion)); BF = 1/test[1] #switch to BF10 inclusion
table$BF10 = BF$bf[order(c(15,14,13,13,11,10,9,7,6,5,4,3,2,1,8))] # reorder
table
8898.6625625 / 560.3310235
mod <- lm(RT ~ condition*intervention + condition*age + condition*gender + condition*thirsty + condition*hungry + condition*BMI_t1 + condition*diff_base_RT , data = PAV.means) # for estimated means
summary(mod)
mod <- lmer(RT ~ condition*intervention + condition*age + condition*gender + condition*thirsty + condition*hungry + condition*BMI_t1 + condition*diff_base_RT + (1|id), data = PAV.means, control = control, REML = T) # recompute model with REML = T now for further report
summary(mod)
mod <- lm(RT ~ condition*intervention + condition*age + condition*gender + condition*thirsty + condition*hungry + condition*BMI_t1 + condition*diff_base_RT + condition*id, data = PAV.means) # for estimated means
summary(mod)
mod <- lm(RT ~ condition*intervention + condition*age + condition*gender + condition*thirsty + condition*hungry + condition*BMI_t1 + condition*diff_base_RT +id, data = PAV.means) # for estimated means
summary(mod)
knitr::opts_chunk$set(echo = FALSE, warnings=FALSE)
library(repro)
# load packages from yaml header
automate_load_packages()
# include external scripts
automate_load_scripts()
# load data
info <- automate_load_data(info, read.csv, stringsAsFactors = T)
intern <- automate_load_data(intern, read.csv, stringsAsFactors = T)
PAV <- automate_load_data(PAV, read.csv, stringsAsFactors = T)
INST <- automate_load_data(INST, read.csv, stringsAsFactors = T)
PIT <- automate_load_data(PIT, read.csv, stringsAsFactors = T)
HED <- automate_load_data(HED, read.csv, stringsAsFactors = T)
check_git()
check_make()
check_docker()
options(scipen = 666, warn=-1, contrasts=c("contr.sum","contr.poly"), mc.cores = parallel::detectCores()) #remove scientific notation # remove warnings #set contrasts to sum !
set.seed(666) #set random seed
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')) #set "better" lmer optimizer #nolimit # yoloptimizer
emm_options(pbkrtest.limit = 5000) #increase repetitions limit
cl <- parallel::detectCores() #to mulithread
source('R/plots.R', echo=F)# plot specification
source('R/utils.R', echo=F)# useful functions
#subset only pretest
tables <- c("PAV","INST","PIT","HED", "intern")
dflist <- lapply(mget(tables),function(x)subset(x, group == 'obese'))
list2env(dflist, envir=.GlobalEnv)
intern = subset(intern, session == 'third') #only last session
#exclude participants (242 really outlier everywhere, 256 can't do the task, 114 & 228 REALLY hated the solution and thus didn't "do" the conditioning) & 123 and 124 have imcomplete data
# dflist <- lapply(mget(tables),function(x)filter(x, id %notin% c(242, 256, 114, 228, 123, 124)))
# list2env(dflist, envir=.GlobalEnv)
# prepro RT PAV -----------------------------------------------------------
# get times in milliseconds
PAV$RT    <- PAV$RT * 1000
#Preprocessing
PAV$condition <- droplevels(PAV$condition, exclude = "Baseline")
acc_bef = mean(PAV$ACC, na.rm = TRUE) #0.93
full = length(PAV$RT)
##shorter than 100ms and longer than 3sd+mean
PAV.clean <- filter(PAV, RT >= 100) # min RT is
PAV.clean <- ddply(PAV.clean, .(id), transform, RTm = mean(RT))
PAV.clean <- ddply(PAV.clean, .(id), transform, RTsd = sd(RT))
PAV.clean <- filter(PAV.clean, RT <= RTm+3*RTsd)
# calculate the dropped data in the preprocessing
clean = length(PAV.clean$RT)
dropped = full-clean
(dropped*100)/full
# gather PAV --------------------------------------------------------------------
PAV.means <- aggregate(list(RT=PAV.clean$RT, liking=PAV.clean$liking), by = list(PAV.clean$id, PAV.clean$condition, PAV.clean$session), FUN='mean') # extract means
PAV.means = PAV.means %>% gather(variable, value, (RT:liking)) %>%  unite(var, variable,Group.3) %>% spread(var, value)
colnames(PAV.means) <- c('id','condition', 'baseline_lik', 'liking', 'baseline_RT', 'RT')
PAV.means = filter(PAV.means, id %notin% c(230)) # remove 230 because it doesnt have CS minus condition
PAV.means = na.omit(PAV.means); # remove dropout participants
# create baseline diff
Empty = subset(PAV.means, condition == "CSminus"); Milkshake = subset(PAV.means, condition == "CSplus"); diff = Empty;
diff$diff_base_lik = Milkshake$baseline_lik - Empty$baseline_lik; diff$diff_base_RT = Empty$baseline_RT - Milkshake$baseline_RT; # reverse for RT because we are looking at latency
PAV.means = merge(x = PAV.means, y = diff[ , c("diff_base_lik", "diff_base_RT", 'id')], by = "id", all.x=TRUE)
PAV.means = PAV.means %>% group_by %>% mutate_at(c('diff_base_lik', "diff_base_RT"), scale)
# gather INST -------------------------------------------------------------
INST.means <- aggregate(INST$grips, by = list(INST$id, INST$trial, INST$session), FUN='mean') # extract means
INST.means = spread(INST.means, Group.3, x)
colnames(INST.means) <- c('id','trial','baseline', 'grips')
tmp = lspline(INST.means$trial, 5); INST.means$ls1 = tmp[,1] ; INST.means$ls2 = tmp[,2]
INST.means = na.omit(INST.means); # remove dropout participants
# create baseline diff
# Empty = subset(INST.means, condition == "Empty"); Milkshake = subset(INST.means, condition == "MilkShake"); diff = Empty;
# diff$diff_base = Milkshake$baseline - Empty$baseline
# INST.means = merge(x = INST.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
# gather PIT --------------------------------------------------------------------
PIT.means <- aggregate(PIT$AUC, by = list(PIT$id, PIT$condition, PIT$session), FUN='mean') # extract means
PIT.means = spread(PIT.means, Group.3, x)
colnames(PIT.means) <- c('id', 'condition','baseline', 'AUC')
#remove the baseline (we just use it for fMRI analysis)
PIT.means =  subset(PIT.means, condition != 'BL')
PIT.means = na.omit(PIT.means); # remove dropout participants
# create baseline diff
Empty = subset(PIT.means, condition == "CSminus"); Milkshake = subset(PIT.means, condition == "CSplus"); diff = Empty;
diff$diff_base = Milkshake$baseline - Empty$baseline
PIT.means = merge(x = PIT.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
PIT.means = PIT.means %>% group_by %>% mutate_at('diff_base', scale)
# gather HED --------------------------------------------------------------
HED.means <- aggregate(list(liking=HED$perceived_liking, intensity=HED$perceived_intensity, familiarity=HED$perceived_familiarity), by = list(HED$id, HED$condition, HED$session), FUN='mean') # extract means
HED.means = HED.means %>% gather(variable, value, (liking:familiarity)) %>%  unite(var, variable,Group.3) %>% spread(var, value)
colnames(HED.means) <- c('id','condition', 'baseline_fam', 'familiarity', 'baseline_int', 'intensity', 'baseline_lik', 'liking')
HED.means = na.omit(HED.means); # remove dropout participants
# create Intensity and Familiarity diff
Empty = subset(HED.means, condition == "Empty"); Milkshake = subset(HED.means, condition == "MilkShake"); diff = Empty;
diff$int = Milkshake$intensity - Empty$intensity; diff$fam = Milkshake$familiarity - Empty$familiarity;
HED.means = merge(x = HED.means, y = diff[ , c("int", "fam", 'id')], by = "id", all.x=TRUE)
# create baseline diff
diff$diff_base = Milkshake$baseline_lik - Empty$baseline_lik
HED.means = merge(x = HED.means, y = diff[ , c("diff_base", 'id')], by = "id", all.x=TRUE)
HED.means = HED.means %>% group_by %>% mutate_at(c("int", "fam", "diff_base"), scale)
#merge with info
tables = c('PAV.means', 'INST.means', 'PIT.means', 'HED.means')
dflist <- lapply(mget(tables),function(x)merge(x, info, by = "id"))
list2env(dflist, envir=.GlobalEnv)
# creates diff BMI for each data
dflist <- lapply(mget(tables),function(x) diffX(x))
list2env(dflist, envir=.GlobalEnv)
# creates internal states variables for each data
listA = 2:5
dflist = mapply(internal,tables,listA)
list2env(dflist, envir=.GlobalEnv)
PAV.means$BMI1 = PAV.means$BMI_t1 # keep it unstandadized for later
#center covariates
dflist <- lapply(mget(tables),function(x) x %>% group_by %>% mutate_at(c("thirsty", "hungry", "age", "diff_BMIz", "BMI_t1"), scale))
list2env(dflist, envir=.GlobalEnv)
#imput mean (0 since its mean centered) for the two participant that have missing covariate (MAR) data so we can still use them in ANCOVA (this happens only for thirsty and hungry) in PAV 232
tables <- c("PAV.means")
dflist <- lapply(mget(tables),function(x) imput(x))
list2env(dflist, envir=.GlobalEnv)
# clean PAV --------------------------------------------------------------
# define as.factors
fac <- c("id", "condition", "gender", "intervention")
PAV.means[fac] <- lapply(PAV.means[fac], factor)
#revalue all catego
PAV.means$condition = as.factor(revalue(PAV.means$condition, c(CSminus="-1", CSplus="1"))); PAV.means$condition <- factor(PAV.means$condition, levels = c("1", "-1"))#change value of condition
# clean PIT --------------------------------------------------------------
# define as factors
PIT.means[fac] <- lapply(PIT.means[fac], factor)
#revalue all catego
PIT.means$condition = as.factor(revalue(PIT.means$condition, c(CSminus="-1", CSplus="1"))); PIT.means$condition <- factor(PIT.means$condition, levels = c("1", "-1"))#change value of condition
# clean HED ---------------------------------------------------------------
# define as.factors
HED.means[fac] <- lapply(HED.means[fac], factor)
#revalue all catego
HED.means$condition = as.factor(revalue(HED.means$condition, c(MilkShake="1", Empty="-1"))) #change value of condition
HED.means$condition <- relevel(HED.means$condition, "1") # Make MilkShake first
# clean INST -------------------------------------------------------------
#defne factors
fac <- c("id", "gender", "intervention")
INST.means[fac] <- lapply(INST.means[fac], factor)
#revalue all catego
df = PAV; df$group = as.factor(revalue(as.factor(df$group), c("control"="Lean", "obese"="Obese")));
AGE = ddply(df,~group,summarise,mean=mean(age),sd=sd(age), min = min(age), max = max(age));
