#load packages
if(!require(pacman)) {
install.packages("pacman")
library(pacman)
}
pacman::p_load(tidyverse, plyr,dplyr,readr,rlist, ggpubr, NlcOptim,pracma, here, foreach, parallel, doSNOW, future, corrplot, RColorBrewer)
# SETUP ------------------------------------------------------------------
task = 'PBlearning'
# Set working directory #change here if the switchdrive is not on your home folder
analysis_path <- here::i_am()
here::i_am()
analysis_path <- here::i_am(".git")
analysis_path <- here::here()
analysis_path
??here()
analysis_path <- here::i_am("Analysis/RECOVERY.R")
report::report_system()
##################################################################################################
# Created  by D.M.T. on AUGUST 2021
##################################################################################################
#                                      PRELIMINARY STUFF ----------------------------------------
#load libraries
if(!require(pacman)) {
install.packages("pacman")
install.packages("devtools")
library(pacman)
}
#get packages
pacman::p_load(tidyverse, dplyr, plyr, Rmisc, afex, BayesFactor, ggpubr)
# get tools
devtools::source_gist("383aa93ffa161665c0dca1103ef73d9d",
filename = "effect_CI.R")
devtools::source_gist("2a1bb0133ff568cbe28d",
filename = "geom_flat_violin.R")
# -------------------------------------------------------------------------
# *************************************** SETUP **************************************
# -------------------------------------------------------------------------
# Set path
analysis_path = getwd()
# Set working directory
figures_path  <- file.path(analysis_path, '../behavioral/figures')
setwd(analysis_path)
#datasets dictory
data_path <- file.path(analysis_path,'../behavioral/DATA')
# open datasets
HED  <- read.delim(file.path(data_path,'OBIWAN_HEDONIC.txt'), header = T, sep ='') #
info <- read.delim(file.path(data_path,'info_expe.txt'), header = T, sep ='') #
#subset only pretest
HED = subset(HED, session == 'second')
#exclude participants (242 really outlier everywhere, 256 can't do the task, 114 & 228 REALLY hated the solution and thus didn't "do" the conditioning) & 123, 124 and 226 have imcomplete data
`%notin%` <- Negate(`%in%`)
HED = filter(HED, id %notin% c(242, 256, 114, 228, 123, 124, 226))
#merge with info
HED = merge(HED, info, by = "id")
# Check Demo
AGE = ddply(HED,.(), summarise,mean=mean(age),sd=sd(age), min = min(age), max = max(age)); AGE
GENDER = ddply(HED, .(id), summarise, gender=mean(as.numeric(gender)))  %>%
group_by(gender) %>%
tally() ; GENDER #1 = women
cov = ddply(HED, .(id),  summarize, age = mean(age, na.rm = TRUE), gender = mean(as.numeric(gender), na.rm = TRUE)) ; cov$age = scale(cov$age)
write.table(cov, (file.path(analysis_path, "../univariate/covariate.txt")), row.names = F, sep="\t")
# -------------------------------------- PLOTS -----------------------------------------------
# -------------------------------------- themes for plots --------------------------------------------------------
averaged_theme <- theme_bw(base_size = 32, base_family = "Helvetica")+
theme(strip.text.x = element_text(size = 32, face = "bold"),
strip.background = element_rect(color="white", fill="white", linetype="solid"),
legend.position=c(.9,.9),
legend.title  = element_text(size = 12),
legend.text  = element_text(size = 10),
legend.key.size = unit(0.2, "cm"),
legend.key = element_rect(fill = "transparent", colour = "transparent"),
panel.grid.major.x = element_blank() ,
panel.grid.major.y = element_line(size=.2, color="lightgrey") ,
panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size =  30),
axis.line = element_line(size = 0.5),
panel.border = element_blank())
pal = viridis::inferno(n=5) # specialy conceived for colorblindness
HED.means <- aggregate(list(HED$perceived_liking, HED$perceived_intensity), by = list(HED$id, HED$condition), FUN='mean') # extract means
colnames(HED.means) <- c('id','condition','perceived_liking', 'perceived_intensity')
HED.means$int =  HED.means$perceived_intensity[HED.means$condition=="MilkShake"] - HED.means$perceived_intensity[HED.means$condition=="Empty"]; HED.means$int = scale(HED.means$int)
HED.means$lik =  HED.means$perceived_liking[HED.means$condition=="MilkShake"] - HED.means$perceived_liking[HED.means$condition=="Empty"]; HED.means$lik = scale(HED.means$lik)
HED.means$id = as.factor(HED.means$id); HED.means$condition = as.factor(HED.means$condition)
# AVERAGED EFFECT INTENSITY
dfH <- summarySEwithin(HED.means,
measurevar = "perceived_intensity",
withinvars = "condition",
idvar = "id")
dfH$cond <- ifelse(dfH$condition == "MilkShake", -0.25, 0.25)
HED.means$cond <- ifelse(HED.means$condition == "MilkShake", -0.25, 0.25)
set.seed(666)
HED.means <- HED.means %>% mutate(condjit = jitter(as.numeric(cond), 0.3),
grouping = interaction(id, cond))
pp <- ggplot(HED.means, aes(x = cond, y = perceived_intensity,
fill = condition, color = condition)) +
geom_point(data = dfH, alpha = 0.5) +
geom_line(aes(x = condjit, group = id, y = perceived_intensity), alpha = .3, size = 0.5, color = 'gray') +
geom_flat_violin(scale = "count", trim = FALSE, alpha = .2, aes(fill = condition, color = NA))+
geom_point(aes(x = condjit), alpha = .3,) +
geom_crossbar(data = dfH, aes(y = perceived_intensity, ymin=perceived_intensity-ci, ymax=perceived_intensity+ci,), width = 0.2 , alpha = 0.1)+
ylab('Perceived taste intesity') +
xlab('') +
scale_y_continuous(expand = c(0, 0), breaks = c(seq.int(0,100, by = 20)), limits = c(-0.5,100.5)) +
scale_x_continuous(labels=c("Milkshake", "Tasteless"),breaks = c(-.25,.25), limits = c(-.5,.5)) +
scale_fill_manual(values=c("MilkShake"= pal[3], "Empty"=pal[1]), guide = 'none') +
scale_color_manual(values=c("MilkShake"=pal[3], "Empty"=pal[1]), guide = 'none') +
theme_bw()
ppp1 <- pp + averaged_theme + theme(plot.margin = margin(3,0.1,0.1,0.1, "cm"))
ppp1
# STATS -------------------------------------------------------------------
HED.means$condition <- relevel(HED.means$condition, "MilkShake") # Make MilkShake first
# intensity
t.test(perceived_intensity ~ condition, data = HED.means, paired = T)
cohen_d_ci(HED.means$perceived_intensity[HED.means$condition == "MilkShake"], HED.means$perceived_intensity[HED.means$condition == "Empty"], paired=T)
ttestBF(HED.means$perceived_intensity[HED.means$condition == "MilkShake"], HED.means$perceived_intensity[HED.means$condition == "Empty"])
library(repro)
# load packages from yaml header
automate_load_packages()
# include external scripts
automate_load_scripts()
# load data
intern <- automate_load_data(intern, read.csv, stringsAsFactors = T)
help(Startup)
.libpaths()
system("source ~/.bashrc")
system(". ~/.bashrc")
cat("\nSuccessfully loaded .Rprofile at", date(), "\n")
system(source ~/.bashrc)
system("source ~/.bashrc")
Sys.setenv(BASH_ENV="~/.bashrc")
a = c(1,1,1)
b = c(1,1,1)
bind(a,b)
rbind(a,b)
cbind(a,b)
coerce(a,b)
norm(1.96)
rnorm(1.96)
dnorm(1.96)
a = c(1,1,1,1,5)
a(5)
a[length[a]]
a[length(a)]
library(DescTools)
attach(d.pizza)
a
b = a
cbind(a,b)
x  = as.Date(26.10.2021)
x  = as.Date("26-10-2021")
x
x[1]
as.month(x)
month(x)
attr(x)
months(x)
m = list(1,2,"c",4,5)
unlist(m)
f = cbind(a,b)
f
x = a
f= b
ft = cbind(x,f)
ft
merge(f,ft)
f
t= b
f = cbind(a,b)
merge(f,ft)
c(12L,34L,35L)
x = c(12L,34L,35L)
median(x)
typeof(median(x))
ls("V")
ls(char="V")
ls(pat="V")
fg = "V"
ls(pat="V")
ls(char<-"V")
V = 0
ls(pat="V")
ls(char="V")
c("c",3)
x = c("c",3)
typeof(x)
typeof(cbind(x,x)
)
str(cbind(x,x))
anovadata = o
anovadata = 0
ls(pat="V")
ls(pat="^V")
Varx = 0
ls(pat="^V")
arVx = 0
ls(pat="^V")
library(repro)
# load packages from yaml header
automate_load_packages()
# include external scripts
automate_load_scripts()
# load data
intern  <- automate_load_data(intern, read.csv, stringsAsFactors = T)
medic    <- automate_load_data(medic, read.csv, stringsAsFactors = T)
PAV      <- automate_load_data(PAV, read.csv, stringsAsFactors = T)
INST     <- automate_load_data(INST, read.csv, stringsAsFactors = T)
PIT      <- automate_load_data(PIT, read.csv, stringsAsFactors = T)
HED      <- automate_load_data(HED, read.csv, stringsAsFactors = T)
HED_fMRI <- automate_load_data(HED_fMRI, read.csv, stringsAsFactors = T)
x = session_info();  opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE) # set F for all
## we recommend running this is a fresh R session or restarting your current session
#install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
#install_cmdstan()
# check_git(); check_make(); check_docker() #check if installed
sessio = session_info(); #opts_chunk$set(echo = F, message=F, warning=F) # set echo F for all
niter = 500; warm = 100; chains = 4; cores = 4; nsim = 10000 # number of iterations (to change if you want to quick check and warmups #or also parallel::detectCores()/2)
options(scipen = 666, warn=-1, contrasts=c("contr.sum","contr.poly"), mc.cores = cores);  #remove scientific notation # remove warnings #set contrasts to sum !
#cl = parallel::detectCores()/2
set.seed(666) #set random seed
control = lmerControl(optimizer ='optimx', optCtrl=list(method='nlminb')) #set "better" lmer optimizer #nolimit # yoloptimizer
#emm_options(pbkrtest.limit = 8000) #increase repetitions limit for frequentist stats
source('R/plots.R', echo=F)# plot specification
source('R/utils.R', echo=F)# useful functions
panderOptions('knitr.auto.asis', FALSE) #remove auto styling
# Look at R/clean.R (listed in the YAML) which does all the preprocessing for more info
# If you are unsure weather or not you have `git` `make` & `docker`.
# check_git()
# check_make()
# check_docker()
#subset only obese
tables <- c("PAV","INST","PIT","HED", "intern")
dflist <- lapply(mget(tables),function(x)subset(x, group == 'obese'))
list2env(dflist, envir=.GlobalEnv)
#exclude participants (242 really outlier everywhere, 256 can't do the task, 228 REALLY hated the solution and thus didn't "do" the conditioning)
# dflist <- lapply(mget(tables),function(x)filter(x, id %notin% c(242, 256, 228))
# list2env(dflist, envir=.GlobalEnv)
#center covariates paste0(names(PAV), collapse="','")
medic$ageF = medic$age; medic$weightLoss = -(medic$BMI_diff); medic$bmi1 = medic$BMI_V1; medic$dif_interv = medic$Date_diff #keep uncentered for descriptive stats + reverse BMI_diff so it in terms of actual weight loss and not weight gain
biomed <- c('age','Date_diff','BW_diff','BMI_diff','WC_diff','Insulin_diff','X2.AG_diff','reelin_diff','MCP_diff','TNFalpha_diff','GLP_diff','Ghrelin_diff','Glu_diff','HOMA_IR_diff', 'AEA_diff', 'OEA_diff', 'PEA_diff', 'BMI_V1')
medic = medic %>% group_by %>% mutate_at(biomed, scale)
#remove outliers from biomedical (+- 3 SD)
df_dict <- data.frame(variable = biomed, out_low = rep(-3,length(biomed)),  out_high = rep(3,length(biomed)))
for (var in df_dict$variable) {
medic[[var]][medic[[var]] < df_dict[df_dict$variable == var, ]$out_low | medic[[var]] > df_dict[df_dict$variable == var, ]$out_high] <- NaN}
#merge with medic
tables = tables[-length(tables)]; # remove intern
dflist <- lapply(mget(tables),function(x)merge(x, medic, by = "id"))
list2env(dflist, envir=.GlobalEnv)
# creates internal states variables for each data
listA = 2:5
def = function(data, number){
baseINTERN = subset(intern, phase == number)
data = merge(x = get(data), y = baseINTERN[ , c("thirsty", 'hungry',  'piss', 'id', 'session')], by = c("id", 'session'), all.x=TRUE)
return(data)
}
dflist = mapply(def,tables,listA)
list2env(dflist, envir=.GlobalEnv)
#center covariates
numer <- c('thirsty','hungry')
dflist <- lapply(mget(tables),function(x) x %>% group_by %>% mutate_at(numer, scale))
list2env(dflist, envir=.GlobalEnv)
covariate = c(biomed, numer)
# prepro RT PAV -----------------------------------------------------------
# get times in milliseconds
PAV$RT    <- PAV$RT * 1000
#Preprocessing
PAV$condition <- droplevels(PAV$condition, exclude = "Baseline")
acc_bef = mean(PAV$ACC, na.rm = TRUE) # 0.87
full = length(PAV$RT)
##shorter than 100ms and longer than 3sd+mean
PAV.clean <- filter(PAV, RT >= 100) # min RT is
PAV.clean <- ddply(PAV.clean, .(id, session), transform, RTm = mean(RT), RTsd = sd(RT))
PAV.clean <- filter(PAV.clean, RT <= RTm+3*RTsd)
# calculate the dropped data in the preprocessing
clean = length(PAV.clean$RT)
dropped = full-clean
(dropped*100)/full #13.26754
# clean PAV --------------------------------------------------------------
PAV = PAV.clean
# define as.factors
fac <- c("id", "trial", "condition", "session", "intervention","trialxcondition", "gender"); PAV[fac] <- lapply(PAV[fac], factor)
#revalue all catego
PAV$session = as.factor(revalue(PAV$session, c(second="0", third="1"))) #change value of session
PAV$condition = as.factor(revalue(PAV$condition, c(CSminus="-1", CSplus="1"))); #PAV$condition <- factor(PAV$condition, levels = c("1", "-1"))#change value of condition
PAV.means <- aggregate(PAV[,c(covariate, "weightLoss","ageF", "BMI_V1", "liking", "RT")] , by = list(PAV$id, PAV$condition,PAV$session,PAV$intervention, PAV$gender), FUN = 'mean',na.action = na.omit)
colnames(PAV.means) <- c('id','condition','session','intervention', 'gender', covariate,"weightLoss","ageF", "BMI_T1", "liking", "RT")
PAV.means$BMI = scale(PAV.means$BMI_T1)
#imput mean (0) for the two covariate (MAR) so we can get BF (missing values fot 2 participant 262 and 232)
PAV.means$thirsty[is.na(PAV.means$thirsty)] <- 0 ; PAV.means$hungry[is.na(PAV.means$hungry)] <- 0
# clean INST --------------------------------------------------------------
INST$Trial = as.numeric(INST$trial)
x = lspline(INST$Trial, 5); INST$Trial1 = x[,1]; INST$Trial2 = x[,2];
# define as.factors
fac <- c("id", "trial", "session", "intervention", "gender"); INST[fac] <- lapply(INST[fac], factor)
#revalue all catego
INST$session = as.factor(revalue(INST$session, c(second="0", third="1"))) #change value of session
INST.means <- aggregate(INST[,c(covariate, "grips")] , by = list(INST$trial, INST$session,INST$intervention, INST$gender), FUN = 'mean',na.action = na.omit)
colnames(INST.means) <- c('trial','session','intervention', 'gender', covariate, "grips")
#imput mean (0) for the two covariate (MAR) so we can get BF (missing values for 3 participant 239, 258, 231)
INST.means$thirsty[is.na(INST.means$thirsty)] <- 0 ; INST.means$hungry[is.na(INST.means$hungry)] <- 0
INST.means$Trial = as.numeric(INST.means$trial)
x = lspline(INST.means$Trial, 5); INST.means$Trial1 = x[,1]; INST.means$Trial2 = x[,2];
dfTrial = ddply(INST,.(trial,session),summarise,grips=mean(grips)); dfTrial$Trial = scale(as.numeric(dfTrial$trial))
dfTrial$phasis = ifelse(dfTrial$Trial >	-1.07212710 , "1", "0")
dfTrial$T2 = ifelse(dfTrial$Trial > 0, dfTrial$Trial^2, -dfTrial$Trial^2)
# clean PIT --------------------------------------------------------------
PIT = subset(PIT, condition != "BL")
# define as.factors
fac <- c("id", "trial", "condition", "session", "intervention","trialxcondition", "gender"); PIT[fac] <- lapply(PIT[fac], factor)
#revalue all catego
PIT$session = as.factor(revalue(PIT$session, c(second="0", third="1"))) #change value of session
PIT$condition = as.factor(revalue(PIT$condition, c(CSminus="-1", CSplus="1"))); #PIT$condition <- factor(PIT$condition, levels = c("1", "-1"))#change value of condition
PIT.means <- aggregate(PIT[,c(covariate, "AUC")] , by = list(PIT$id, PIT$condition,PIT$session,PIT$intervention, PIT$gender), FUN = 'mean',na.action = na.omit)
colnames(PIT.means) <- c('id','condition','session','intervention', 'gender', covariate, "AUC")
#imput mean (0) for the two covariate (MAR) so we can get BF (missing values fot 2 participant 229 and 238)
PIT.means$thirsty[is.na(PIT.means$thirsty)] <- 0 ; PIT.means$hungry[is.na(PIT.means$hungry)] <- 0
# clean HED --------------------------------------------------------------
#create and center int covariate
HED$lik = HED$perceived_liking #rename
dfl = ddply(HED,.(id,condition,session),summarise, fam=mean(perceived_familiarity), int=mean(perceived_intensity));
dfi = subset(dfl, condition  =="MilkShake"); dfi$int = dfl$int[dfl$condition  =="MilkShake"] -dfl$int[dfl$condition  =="Empty"];  dfi$fam = dfl$fam[dfl$condition  =="MilkShake"] -dfl$fam[dfl$condition  =="Empty"]; dfi$int = scale(dfi$int); dfi$fam = scale(dfi$fam); dfi = dfi[-c(2)]
HED = merge(HED, dfi, by = c("id", "session"))
# define as.factors
fac <- c("id", "trial", "condition", "session", "intervention","trialxcondition", "gender"); HED[fac] <- lapply(HED[fac], factor)
#revalue all catego
HED$session = as.factor(revalue(HED$session, c(second="0", third="1"))) #change value of session
HED$condition = as.factor(revalue(HED$condition, c(Empty="-1", MilkShake="1")));#HED$condition <- factor(HED$condition, levels = c("1", "-1"))#change value of condition
HED.means <- aggregate(HED[,c(covariate, "fam", "int", "lik")] , by = list(HED$id, HED$condition,HED$session,HED$intervention, HED$gender), FUN = 'mean', na.action = na.omit)
colnames(HED.means) <- c('id','condition','session','intervention', 'gender', covariate, "fam", "int", "lik")
#imput mean (0) for the two covariate (MAR) so we can get BF (missing values fr 1 participant 217)
HED.means$thirsty[is.na(HED.means$thirsty)] <- 0 ; HED.means$hungry[is.na(HED.means$hungry)] <- 0
# ALL ---------------------------------------------------------------------
#factorize ID
tables <- c("PAV.means","PIT.means","HED.means")
dflist <- lapply(mget(tables),function(x)facID(x))
list2env(dflist, envir=.GlobalEnv)
save(PAV.means, file = "data/PAV.Rdata")
save(INST.means, file = "data/INST.Rdata")
save(PIT.means, file = "data/PIT.Rdata")
save(HED.means, file = "data/HED.Rdata")
#create df for AFNI
dfHED = HED.means
dfHED[is.na(dfHED)] <- 0
save(dfHED, file = "data/HED_fmri.Rdata")
# internHED = subset(intern, phase ==5)
# dfx = x = Reduce(function(x,y) merge(x = x, y = y, by = "id"),
#                  list(df, internHED, info)); dfx[is.na(dfx)] <- 0
# x = Reduce(function(x,y) merge(x = x, y = y, by = c("id","session")),
#            list(dfl, dfm, dfx))
#
# tables = c('x')
# numer <- c("thirsty", "hungry",  "piss", "OEA", "PEA","X2.AG","AEA","Leptin",  "Resistin","adiponectin","MCP","TNFalpha","reelin","glucagon", "Ghrelin","obestatin","GLP1","insulin","Fast_glu","BMI_t1", "bmi_diff")
# dflist <- lapply(mget(tables),function(x) x %>% group_by %>% mutate_at(numer, scale))
# list2env(dflist, envir=.GlobalEnv); x$age = x$age_Z
#
# dfHED = select(x, -c(age_Z, bmi1, bmi_dif, task, phase, idXsession, BMI_t2, group))
# dfHED$session = as.factor(revalue(as.factor(dfHED$session), c("second"="0", "third"="1"))); dfHED1 = dfHED;  dfHED2 = dfHED; dfHED1$condition = "1"; dfHED2$condition = "-1"; dfHED = rbind(dfHED1, dfHED2); dfHED[is.na(dfHED)] <- 0
#
# save(dfHED, file = "data/HED_fmri.Rdata")
#
# create df for weight loss
df = subset(PAV.means, session == "1"); df = subset(df, condition == "1")
df$intervention = as.factor(revalue(as.factor(df$intervention), c("0"="Placebo", "1"="Liraglutide")))#using pav.means but oculd be any other
df$GENDER = as.factor(revalue(as.factor(df$gender), c("0"="Men", "1"="Women")))
df$AGE = df$ageF; df$BMI = df$BMI_T1 ;
med <- gather(df, "feature", "n", 8:22)
#biomed = numer[3:14];
dfmed = na.omit(medic[,c('intervention',biomed[3:14])]) #create df for var selec
#inter score for fmri Plots
diffPRE = subset(HED_fMRI, session == 'pre') ; diffPOST = subset(HED_fMRI, session == 'post')
inter = diffPRE; inter$OFC_inter =  diffPOST$OFC_score - diffPRE$OFC_score; inter$HF_inter =  diffPOST$HF_score - diffPRE$HF_score
inter$id = as.factor(inter$id); inter$intervention = as.factor(inter$intervention)
inter = filter(inter, id %notin% c(246)) #remove huge outlier because it biases the whole further results on mediation and weigthloss -> you can check it ou via:
# ggplot(inter, aes(x= BMI_diff, y=intervention, label=id))+
#   geom_point() +geom_text(aes(label=id),hjust=1, vjust=0)
weightloss = inter$BMI_diff; #reverse in terms of wight loss not weigth gain
ind <- sapply(inter, is.numeric)
inter[ind] <- lapply(inter[ind], scale)
inter$Intervention = as.numeric(inter$intervention); inter$HF  = as.vector(inter$HF_inter); inter$`Weight Loss` = -as.vector(weightloss) #reverse to have it in positive terms
egltable(c("BMI", "AGE", "GENDER"),
g = "intervention", data = df, strict = FALSE) %>%
kbl(caption ="Summary statistics", digits = 2) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F) %>%
row_spec(0,bold=T,align='c')
# Boxplot of biomedical variables per group
ggplot(med)+
geom_boxplot(aes(intervention, n))+
facet_wrap(~feature, scales = "free")+
labs(title = "")+
theme_fivethirtyeight()+
theme(axis.title = element_text()) +
ylab("Biomedical predictor's value (scaled)") +
xlab('')
# Plot correlogram of numeric variables
#pairs(~., data = df[,8:19], main = "Scatterplot Matrix of variables")
#corrplot(cor(df[,8:19], use="pairwise.complete.obs"), type="lower")
#1) with Recursive Feature Eliminations (CARET)
sizes = 1:length(dfmed[c(-1)]); len = length(sizes)
seeds <- vector(mode = "list", length = len)
for(i in 1:(len-1)) seeds[[i]]<- sample.int(n=nsim, size = length(sizes)+1)
# for the last model
seeds[[len]]<-sample.int(nsim, 1)
RFEcontrol <- rfeControl(functions=rfFuncs, method="cv", number=10, seeds= seeds) # control options
rfeResults = rfe(x = dfmed[c(-1)], y = dfmed$intervention, sizes=sizes, rfeControl=RFEcontrol)
predictors(rfeResults)
plot(rfeResults, type=c("g", "o")) # look for the "elbow"
#if we agree that BMI, Body Weight and Waist Circumference actually measure the same thing, there only 4 other variables that are "useful" to separate the two groups :
#Reelin, GLP, TNFalpha, and Glucide levels
df$Intervention = as.numeric(df$intervention)
# medi =  psych::mediate(weightLoss ~ Intervention + (Date_diff) + (GLP_diff) + (reelin_diff) + (Glu_diff), data = df, n.iter = 10000, plot=F)
# mediate.diagram(medi, show.c = F, main= "")
#text(3.7, 6.2, "***",  cex = .8);  text(6, 4.7, "***",  cex = .8)
#summary(medi)
parallel:::setDefaultClusterOptions(setup_strategy = "sequential")
med_res <- intmed::mediate(y = "weightLoss", med = c("GLP_diff" ,  "reelin_diff"), c = c("age","gender"), treat = "Intervention", ymodel = "regression", mmodel = c("regression", "regression"), treat_lv = 1, control_lv = 0, incint = TRUE, inc_mmint = FALSE, conf.level = 0.95, data = df, sim = 1000, complete_analysis = TRUE, digits = 3,  summary_report=F)
med_res
tables1 <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE)
tables1
table = rbind(tables1[[4]][1:3,], tables2[[4]][1:5,])
table <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE)
table$Estimates = unlist(str_split(gsub("[^0-9.,-]", "", table$Estimates), ","))
table
med_res <- intmed::mediate(y = "weightLoss", med = c("GLP_diff" ,  "reelin_diff"), c = c("age","gender"), treat = "Intervention", ymodel = "regression", mmodel = c("regression", "regression"), treat_lv = 1, control_lv = 0, incint = TRUE, inc_mmint = FALSE, conf.level = 0.95, data = df, sim = 1000, complete_analysis = TRUE, digits = 3,  summary_report=F)
med_res <- intmed::mediate(y = "weightLoss", med = c("GLP_diff" ,  "reelin_diff"), c = c("age","gender"), treat = "Intervention", ymodel = "regression", mmodel = c("regression", "regression"), treat_lv = 1, control_lv = 0, incint = TRUE, inc_mmint = FALSE, conf.level = 0.95, data = df, sim = 1000, complete_analysis = TRUE, digits = 3,  summary_report=F, HTML_report = T)
intmed::mediate(y = "weightLoss", med = c("GLP_diff" ,  "reelin_diff"), c = c("age","gender"), treat = "Intervention", ymodel = "regression", mmodel = c("regression", "regression"), treat_lv = 1, control_lv = 0, incint = TRUE, inc_mmint = FALSE, conf.level = 0.95, data = df, sim = 1000, complete_analysis = TRUE, digits = 3,  summary_report=F, HTML_report = T)
setwd("~/Desktop/SwitchDrive/LIRA")
med_res <- intmed::mediate(y = "weightLoss", med = c("GLP_diff" ,  "reelin_diff"), c = c("age","gender"), treat = "Intervention", ymodel = "regression", mmodel = c("regression", "regression"), treat_lv = 1, control_lv = 0, incint = TRUE, inc_mmint = FALSE, conf.level = 0.95, data = df, sim = 1000, complete_analysis = TRUE, digits = 3,  summary_report=F, HTML_report = T)
table <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE)
table
table$Estimates
table[4]$Estimates
table[1]
table[2]
table[3]
table[4]
table[4]$NULL
table[4]$`NULL
`
table$Estimates = unlist(str_split(gsub("[^0-9.,-]", "", table$Estimates), ","))
table$Estimates
table
as_tibble(table[4])
x =as_tibble(table[4])
x$NULL
x
View(x)
x =as_tibble(table[[4]])
x
unlist(table[4])
table <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE)
table
View(table)
x = table[4]
View(x)
x$NULL
x$`NULL`
table <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE)
table = table[4]$`NULL`
table
table$Estimates = unlist(str_split(gsub("[^0-9.,-]", "", table$Estimates), ","))
table
View(table)
table <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE); table = table[4]$`NULL`
table$`p-value` = as.numeric(table$`p-value`); table$`p-value` = ifelse(as.numeric(table$`p-value`) < 0.05,paste("<span style=\" font-weight: bold; \" >" ,sprintf("%.3f",table$`p-value`), "</span>"),  paste("<span>" ,sprintf("%.3f",table$`p-value`), "</span>"))
colnames(table)[4] = "p"
table %>%
kbl(caption ="Mediation Analysis: DV = Weight loss, IV = Intervention", escape=F) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
table <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE); table = table[4]$`NULL`
table
table[,3]
table[,:3]
table[,1:3]
table[1:5,]
table[1:6,]
table[:6,]
table[6,]
table[1:6,]
table <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE); table = table[4]$`NULL`[1:6,]
table
table[4,5]
table[4,3]
table[4,4]
table[4,4] =0.005
table$`p-value` = as.numeric(table$`p-value`); table$`p-value` = ifelse(as.numeric(table$`p-value`) < 0.05,paste("<span style=\" font-weight: bold; \" >" ,sprintf("%.3f",table$`p-value`), "</span>"),  paste("<span>" ,sprintf("%.3f",table$`p-value`), "</span>"))
table
colnames(table)[4] = "p"
table %>%
kbl(caption ="Mediation Analysis: DV = Weight loss, IV = Intervention", escape=F) %>%
kable_styling(latex_options = "HOLD_position", position = "center", full_width = F)
nsim
psych::mediate(weightLoss ~ Intervention + (Date_diff) + (GLP_diff) + (reelin_diff) + (Glu_diff), data = df, n.iter = 10000, plot=F)
psych::mediate(weightLoss ~ Intervention + (Date_diff) + (GLP_diff) + (reelin_diff) + (Glu_diff), data = df, n.iter = 10000, plot=T)
psych::mediate(weightLoss ~ Intervention + (GLP_diff) + (reelin_diff), data = df, n.iter = 10000, plot=T)
psych::mediate(weightLoss ~ Intervention + (GLP_diff) + (reelin_diff), data = df, n.iter = 10000, plot=F)
psych::mediate(weightLoss ~ Intervention + (GLP_diff) + (reelin_diff), data = df, n.iter = 10000, plot=F, print=F)
medi =  psych::mediate(weightLoss ~ Intervention + (GLP_diff) + (reelin_diff), data = df, n.iter = 10000, plot=F)
summary(medi)
plot(medi)
plot(medi)
medi
medi =  psych::mediate(weightLoss ~ Intervention + (GLP_diff) + (reelin_diff), data = df, n.iter = 10000, plot=T)
medi =  psych::mediate(weightLoss ~ Intervention + (GLP_diff) + (reelin_diff), data = df, n.iter = 10000, plot=T, show.c=F)
medi =  psych::mediate(weightLoss ~ Intervention + (GLP_diff) + (reelin_diff), data = df, n.iter = 10000, plot=T, show.c=FALSE)
mediate.diagram(medi,show.c=FALSE)
psych::mediate.diagram(medi,show.c=FALSE)
medi =  psych::mediate(weightLoss ~ Intervention + (GLP_diff) + (reelin_diff), data = df, n.iter = 10000, plot=F); psych::mediate.diagram(medi,show.c=FALSE)
pander(table)
table <- list.clean(readHTMLTable("res.html"), fun = is.null, recursive = FALSE); table = table[4]$`NULL`[1:6,]
pander(table)
table
